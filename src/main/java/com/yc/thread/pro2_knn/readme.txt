欧式距离（Euclidean Distance）是衡量两个点之间直线距离的几何距离。
它是最常用的距离计算方法之一，广泛应用于各种领域，如机器学习、图像处理、数据挖掘等。
欧式距离的计算基于平面上的直角坐标系，适用于任意维度的空间
    在 n 维空间中，给定两个点 A(x1,x2,x3,x4,x5...)  和  B(y1,y2,y3,y4,y5...)
    欧式距离计算公式: 勾股定理
        d =
            1. sum += Math.pow( data1[i] - data2[i], 2);  坐标差平方和
            2. Math.sqrt(sum); 开根号

大数据机器学习:
    1.数据清洗
    2.建模
    3.验证模型
    4.上线运行
    5.反馈


因为数据脱敏，所以数据语义不明，但可以知道数据结构 ： 数据 + 标签
                                         data 训练集  -》 训练模型
                                         test 测试集  -》 验证模型
分析算法: 分类算法(二分类算法)  -》  knn算法 ， k近邻算法
1.计算一条数据与训练集中各数据的距离  ( test 集共 2059条数据 与 data训练集中 39129条数据的距离
2.距离排序
3.取前k条数据的标签    Map<String , int>
                        标签名 ， 数值
4.取数量最多的标签


问题:划分多线程： 共创建线程 2059 * 12 = 24708个线程
    计算一条数据与训练集中各数据的距离 ( test集共 2059条数据  与 data训练集中 39129条数据的距离)
粗粒度版: 按cpu的资源划分线程数：  12核  =》 12线程
    39129条数据/12=》 计算每一条测试集数据与训练集数据的距离
    计算每个线程   startIndex    endIndex
        i=0         0             3,260
        i=1        3,260          3,260*2
        i=2      ....
        i=11     ....             39129
问题：距离排序
    Distance distance[39129]
    引入并行排序: Arrays.parallelSort( distance );

分析项目结构:
1)数据读取: 按行读取数据，一行一个对象，数据切割(按逗号)
2)数据bean
3)算法类
4)线程调度类+任务类
    ParallelGroupKnnClassifier  +  GroupDistanceTask


